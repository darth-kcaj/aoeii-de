
; (defrule ;This starts the rule. Defrule is short for "define rule".
; (fact 1) ;This is the "if" part of the rule. The AI checks to see if these facts
; (fact 2) ;are true. If all the facts are true then the AI continues onto the
; (fact 3) ;actions. Not all rules have 3 facts, but all have at least one.
; ...
; => ;This is the "then" part of the rule.
; (action 1)
; (action 2) ;If all the facts are true then these actions occur. Not all rules have
; (action 3) ;three actions, but all have at least one.
; ...
; )

(defconst infantry-upgrades-flag 1) 
(defconst tower-upgrades-flag 1) 

; Housing

(defrule
(can-build house)
(housing-headroom < 2)    ;the difference between the current population and supportable population (not the
                          ;amount of population houses support)
(population-headroom > 2) ;the difference between the current population and the population limit
=>
(build house)
)



; ESSENCIAL RESEARCH

(defrule
        (can-research ri-double-bit-axe)
        =>
        (research ri-double-bit-axe)
        (disable-self)
)
(defrule
        (can-research ri-bow-saw)
        =>
        (research ri-bow-saw)
        (disable-self)
)
(defrule
        (can-research ri-two-man-saw)
        =>
        (research ri-two-man-saw)
        (disable-self)
)
(defrule
        (can-research ri-heavy-plow)
        =>
        (research ri-heavy-plow)
        (disable-self)
)

(defrule
      
        (can-research ri-horse-collar)
        =>
        (research ri-horse-collar)
        (disable-self)
)



(defrule
        (can-research ri-crop-rotation)
        =>
        (research ri-crop-rotation)
        (disable-self)
)
(defrule
        (can-research ri-gold-mining)
        =>
        (research ri-gold-mining)
        (disable-self)
)
(defrule
        (can-research ri-stone-mining)
        (current-age != feudal-age)
        =>
        (research ri-stone-mining)
        (disable-self)
)
(defrule
        (can-research ri-stone-shaft-mining)
        =>
        (research ri-stone-shaft-mining)
        (disable-self)
)
(defrule
        (can-research ri-gold-shaft-mining)
        (current-age != castle-age)
        =>
        (research ri-gold-shaft-mining)
        (disable-self)
)
(defrule
        (can-research ri-loom)
        =>
        (research ri-loom)
        (disable-self)
)
(defrule
      
        (can-research ri-wheel-barrow)
        (civilian-population > 30)
        =>
        (research ri-wheel-barrow)
        (disable-self)
)
(defrule
      
        (can-research ri-hand-cart)
        (civilian-population > 40)
        =>
        (research ri-hand-cart)
        (disable-self)
)
(defrule
      
        (can-research ri-conscription)
        
        =>
        (research ri-conscription)
        (disable-self)
)

; unit-line upgrades

(defrule
        (goal infantry-upgrades-flag 1)
        (can-research ri-forging)
        =>
        (research ri-forging)
        (disable-self)
)
(defrule
        (goal infantry-upgrades-flag 1)
        (can-research ri-iron-casting)
        =>
        (research ri-iron-casting)
        (disable-self)
)
(defrule
        (goal infantry-upgrades-flag 1)
        (can-research ri-blast-furnace)
        =>
        (research ri-blast-furnace)
        (disable-self)
)
(defrule
        (goal infantry-upgrades-flag 1)
        (can-research ri-scale-mail)
        =>
        (research ri-scale-mail)
        (disable-self)
)
(defrule
        (goal infantry-upgrades-flag 1)
        (can-research ri-chain-mail)
        =>
        (research ri-chain-mail)
        (disable-self)
)
(defrule
        (goal infantry-upgrades-flag 1)
        (can-research ri-plate-mail)
        =>
        (research ri-plate-mail)
        (disable-self)
)

;DARK AGE......

(defrule
(current-age == dark-age)
(can-train villager)
(civilian-population < 14)
=>
(train villager)
)


(defrule
(building-type-count-total house > 0) ; We want to build a house before a mill
(building-type-count-total mill == 0) ; Prevents the construction of multiple mills
(civilian-population > 6)
(resource-found food) ; Builds a mill only if forage bushes or deer is found
(can-build mill)
=>
(build mill)

)

(defrule
(current-age == dark-age)
(building-type-count-total mill > 0)
(resource-found wood)
(building-type-count-total lumber-camp < 1)
(can-build lumber-camp)
=>
(build lumber-camp)
)

(defrule
(building-type-count-total lumber-camp > 0)
(resource-found gold)
(can-build mining-camp)
=>
(build mining-camp)
(disable-self)
)



(defrule
(current-age == dark-age)
(can-research feudal-age)
=>
(research feudal-age)
(chat-to-allies "Feudal Age, here we come!")
(disable-self)
)




(defrule
        (wood-amount greater-than 250)
        (current-age == dark-age)
        (civilian-population > 8)
=>
        (set-strategic-number sn-wood-gatherer-percentage 10)
        (set-strategic-number sn-food-gatherer-percentage 80)
        (set-strategic-number sn-gold-gatherer-percentage 10)
        (set-strategic-number sn-stone-gatherer-percentage 0)
        (chat-to-allies "Prioritizing food and gold")
)

(defrule
        (wood-amount less-than 250)
        (current-age == dark-age)
        (civilian-population > 8)
=>
        (set-strategic-number sn-wood-gatherer-percentage 45)
        (set-strategic-number sn-food-gatherer-percentage 55)
        (set-strategic-number sn-gold-gatherer-percentage 0)
        (set-strategic-number sn-stone-gatherer-percentage 0)
        (chat-to-allies "Prioritizing food and wood")
)


; FEUDAL AGE

(defrule
(current-age == feudal-age)
(building-type-count-total lumber-camp > 0) ; We want a lumber camp before farms
(unit-type-count-total villager > 14)
(building-type-count-total farm < 15)
(idle-farm-count == 0) ; Only build farms if there are less than 4 idle farms
=>
(build farm)
)

(defrule
        (current-age == feudal-age)

=>
        (set-strategic-number sn-wood-gatherer-percentage 10)
        (set-strategic-number sn-food-gatherer-percentage 50)
        (set-strategic-number sn-gold-gatherer-percentage 40)
        (set-strategic-number sn-stone-gatherer-percentage 0)
        (chat-to-allies "Setting feudal age phase 1 economy stats")
        (disable-self)
)

(defrule
        (current-age == feudal-age)
        (building-type-count-total barracks == 0)
        (can-build barracks)

=>
        (build barracks)
        (disable-self)
)

(defrule
        (current-age == feudal-age)
        (building-type-count-total barracks == 1)
        (unit-type-count-total spearman-line < 10)
        (can-train spearman-line)

=>
        (train spearman-line)
       
)





(defrule
        (current-age == feudal-age)
        (gold-amount greater-than 250)

=>
        (set-strategic-number sn-wood-gatherer-percentage 40)
        (set-strategic-number sn-food-gatherer-percentage 50)
        (set-strategic-number sn-gold-gatherer-percentage 10)
        (set-strategic-number sn-stone-gatherer-percentage 0)
        (chat-to-allies "Setting feudal age phase 2 deconomy stats")
        (disable-self)
)

(defrule
        (current-age == feudal-age)
        (can-train villager)
        (civilian-population < 20)
=>
        (train villager)
)
(defrule
        (current-age != dark-age)
        (can-build dock)
        ; (goal make-dock-flag 1)
               
=>
        (build dock)
        ; (set-goal make-dock-flag 1)
        (disable-self)
)

(defrule
        (can-build fishing-ship)
        (unit-type-count fishing-ship < 15)
        (building-type-count-total blacksmith != 0)
        (building-type-count-total market != 0)
        =>
        (train fishing-ship)
)

(defrule
(current-age == feudal-age)
(dropsite-min-distance gold greater-than 5)
(dropsite-min-distance gold != -1) ; no gold left on map
(can-build mining-camp)
=>
(build mining-camp)
(disable-self)
)

(defrule
(current-age == feudal-age)
(can-build market)
(building-type-count-total market == 0)
=>
(build market)
)

(defrule
(current-age == feudal-age)
(can-build blacksmith)
(building-type-count-total blacksmith == 0)
=>
(build blacksmith)
)

(defrule
(current-age == feudal-age)
(can-research castle-age)
=>
(research castle-age)
(chat-to-allies "YE BOI, here we come!")
)


; CASTLE AGE


(defrule
(current-age == castle-age)
(can-train villager)
(civilian-population < 30)
=>
(train villager)
)

(defrule
(building-type-count-total lumber-camp > 0)
(resource-found stone)
(current-age == castle-age)
(can-build mining-camp)
=>
(build mining-camp)
(disable-self)
)

(defrule
        (stone-amount less-than 650)
        (current-age == castle-age)
        (building-type-count-total castle == 0)
=>
        (set-strategic-number sn-wood-gatherer-percentage 0)
        (set-strategic-number sn-food-gatherer-percentage 0)
        (set-strategic-number sn-gold-gatherer-percentage 0)
        (set-strategic-number sn-stone-gatherer-percentage 100)
        (chat-to-allies "Setting castle age stone rush")
        (disable-self)
)
(defrule
        (stone-amount greater-than 650)
        (current-age == castle-age)
        (building-type-count-total castle > 0)
=>
        (set-strategic-number sn-wood-gatherer-percentage 20)
        (set-strategic-number sn-food-gatherer-percentage 40)
        (set-strategic-number sn-gold-gatherer-percentage 30)
        (set-strategic-number sn-stone-gatherer-percentage 10)
        (chat-to-allies "Setting castle age normal")
        (disable-self)
)


(defrule
(current-age == castle-age)
(building-type-count-total castle == 0)
(can-build castle)
=>
(build castle)
(chat-to-allies "Building CAstle")
(disable-self)
)

(defrule
(current-age == castle-age)
(building-type-count-total mill > 0)
(resource-found wood)
(building-type-count-total lumber-camp < 2)
(can-build lumber-camp)
=>
(build lumber-camp)
)


(defrule
(current-age == castle-age)
(building-type-count-total farm < 30)
(can-build farm)
(idle-farm-count == 0) ; Only build farms if there are less than 4 idle farms
=>
(build farm)
)

(defrule
(current-age == castle-age)
(can-research imperial-age)
=>
(research imperial-age)
(chat-to-allies "YE BOI, here we come!")
)

(defrule
(current-age >= imperial-age)
(dropsite-min-distance wood greater-than 3)
(can-build lumber-camp)
=>
(build lumber-camp)
)

(defrule
(current-age >= imperial-age)
(dropsite-min-distance stone greater-than 5)
(building-type-count-total mining-camp < 10)
(dropsite-min-distance stone != -1) ; no stone left on map
(can-build mining-camp)
=>
(build mining-camp)
)
(defrule
(current-age >= imperial-age)
(dropsite-min-distance gold greater-than 5)
(building-type-count-total mining-camp < 10)
(dropsite-min-distance gold != -1) ; no gold left on map
(can-build mining-camp)
=>
(build mining-camp)
)


(defrule
(current-age == imperial-age)
(dropsite-min-distance food greater-than 5)
(building-type-count-total farm != 0)
(can-build mill)
=>
(build mill)
)

; IMPERIAL AGE

(defrule
(current-age == imperial-age)
(can-build farm)
(idle-farm-count == 0) ; Only build farms if there are less than 4 idle farms
=>
(build farm)
)

(defrule
(current-age == imperial-age)
(can-train villager)
(civilian-population < 150)
=>
(train villager)
)

; (defrule
;         (current-age == imperial-age)
;         =>
;         (set-escrow-percentage wood 20)
;         (set-escrow-percentage gold 20)
;         (set-escrow-percentage stone 20)
;         (set-escrow-percentage food 20)
;         (disable-self)
; )

(defrule
        (current-age == imperial-age)
        (can-build town-center)
        =>
        (build town-center)
        (disable-self)
)

(defrule
(can-build-wall 1 palisade-wall)
=>
(build-wall 1 palisade-wall)
(disable-self)
)

(defrule
(true)
=>
(set-strategic-number sn-percent-civilian-gatherers 90)
(set-strategic-number sn-percent-civilian-explorers 0)
(set-strategic-number sn-percent-civilian-builders 10)
(set-strategic-number sn-total-number-explorers 1)
(set-strategic-number sn-number-explore-groups 1)
(set-strategic-number sn-maximum-explore-group-size 1)
(set-strategic-number sn-minimum-explore-group-size 1)
(set-strategic-number sn-food-dropsite-distance 5)
(set-strategic-number sn-wood-dropsite-distance 5)
(set-strategic-number sn-gold-dropsite-distance 5)
(set-strategic-number sn-maximum-food-drop-distance 6) 
(set-strategic-number sn-maximum-hunt-drop-distance  6) 
(disable-self)

)

(defrule
        (true)
        =>
        ; (set-strategic-number sn-task-ungrouped-soldiers  1) 
        (set-strategic-number sn-number-attack-groups 1) 
        (set-strategic-number sn-minimum-attack-group-size 10)
        (set-strategic-number sn-maximum-attack-group-size 10)
        (set-strategic-number sn-percent-attack-soldiers 100)
        (set-strategic-number sn-scale-minimum-attack-group-size 0)
        (set-strategic-number sn-scale-maximum-attack-group-size 0)
        (disable-self)
)



; =======================================
; CHEESE STRATS
; =======================================

#load-if-defined MALAY-CIV

(defrule
        (true)
        =>
        (set-goal infantry-upgrades-flag 1)
        (disable-self)
)

(defrule
        (can-build castle)
        (building-type-count-total castle < 2)
        =>
        (build castle)
)

(defrule
        (can-research my-unique-unit-upgrade)
        =>
        (research my-unique-unit-upgrade)
)

(defrule
        (unit-type-count-total my-unique-unit-line < 150)
        (can-train my-unique-unit-line)
        =>
        (train my-unique-unit-line)
)

(defrule
        (current-age == imperial-age)
        =>
        ; (set-strategic-number sn-task-ungrouped-soldiers  1) 
        (set-strategic-number sn-number-attack-groups 1) 
        (set-strategic-number sn-minimum-attack-group-size 75 )
        (set-strategic-number sn-maximum-attack-group-size 75 )
        (disable-self)
)


#end-if